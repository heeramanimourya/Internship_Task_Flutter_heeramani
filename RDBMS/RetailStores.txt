Create   database retailstores;
use retailstores;

1.CREATE TABLE Customers (
    customer_id Int PRIMARY KEY,
    first_name varchar(100),
    last_name varchar(100),
    email varchar(100),
    phone varchar(20),
    address varchar
    join_date DATE
   );

  2. CREATE TABLE Products (
     product_id Int PRIMARY KEY,
    product_name varchar(100),
    category varchar(50),
    price DECIMAL(10,2),
    stock_quantity Int
  );

3. CREATE TABLE Orders (
    order_id Int PRIMARY KEY,
    customer_id Integer,
    order_date DATE,
    total_amount DECIMAL(10,2),
    order_status varchar(20),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

4. CREATE TABLE OrderDetails (
    order_detail_id Int PRIMARY KEY,
    order_id Int,
    product_id Int,
    quantity Int,
    unit_price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

5. CREATE TABLE Payments (
    payment_id Int PRIMARY KEY,
    order_id Int,
    payment_date DATE,
    payment_amount DECIMAL(10,2),
    payment_method varchar(20),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id));

1.INSERT INTO Customers (customer_id, first_name, last_name, email, phone, address, join_date) VALUES
(1, 'Amit', 'Sharma', 'amit.sharma@gmail.com', '9876543210', 'Delhi', '2024-06-15'),
(2, 'Priya', 'Mehta', 'priya.mehta@gmail.com', '9876543211', 'Kolkata', '2024-07-20'),
(3, 'Rahul', 'Verma', 'rahul.verma@gmail.com', '9876543212', 'Mumbai', '2023-08-05'),
(4, 'Sneha', 'Patel', 'sneha.patel@gmail.com', '9876543213', 'Ahmedabad', '2023-08-22'),
(5, 'Vikram', 'Reddy', 'vikram.reddy@gmail.com', '9876543214', 'Hyderabad', '2023-09-10'),
(6, 'Anjali', 'Kumar', 'anjali.kumar@gmail.com', '9876543215', 'Pune', '2025-01-01'),
(7, 'Rohan', 'Joshi', 'rohan.joshi@gmail.com', '9876543216', 'Bangalore', '2025-02-25'),
(8, 'Kavita', 'Nair', 'kavita.nair@gmail.com', '9876543217', 'Kochi', '2025-03-03'),
(9, 'Suresh', 'Mishra', 'suresh.mishra@gmail.com', '9876543218', 'Patna', '2023-11-18'),
(10, 'Neha', 'Singh', 'neha.singh@gmail.com', '9876543219', 'Lucknow', '2025-04-01');

2. INSERT INTO Products (product_id, product_name, category, price, stock_quantity) VALUES
(1, 'Basmati Rice 5kg', 'Grocery', 499.00, 120),
(2, 'Masala Dabba', 'Kitchenware', 799.00, 50),
(3, 'Chikankari Kurti', 'Clothing', 1199.00, 80),
(4, 'Ayurvedic Hair Oil', 'Personal Care', 299.00, 150),
(5, 'Copper Water Bottle', 'Wellness', 599.00, 60),
(6, 'Sandalwood Soap Pack', 'Personal Care', 199.00, 200),
(7, 'Kolhapuri Chappal', 'Footwear', 899.00, 40),
(8, 'Mysore Silk Saree', 'Clothing', 2499.00, 25),
(9, 'Terracotta Planter Set', 'Home Decor', 699.00, 35),
(10, 'Himalayan Pink Salt 1kg', 'Grocery', 149.00, 100);

3. INSERT INTO Orders (order_id, customer_id, order_date, total_amount, order_status) VALUES
(1, 1, '2024-01-05', 1498.00, 'Shipped'),
(2, 2, '2024-01-10', 299.00, 'Delivered'),
(3, 3, '2024-01-15', 2499.00, 'Pending'),
(4, 4, '2024-01-18', 499.00, 'Shipped'),
(5, 5, '2024-01-20', 1598.00, 'Shipped'),
(6, 6, '2024-01-22', 699.00, 'Pending'),
(7, 7, '2024-01-25', 1098.00, 'Delivered'),
(8, 8, '2024-01-28', 199.00, 'Shipped'),
(9, 9, '2024-02-01', 899.00, 'Cancelled'),
(10, 10, '2024-02-05', 2499.00, 'Delivered');

4. INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, unit_price) VALUES
(1, 1, 1, 2, 499.00),   
(2, 1, 4, 1, 299.00),                        
(3, 2, 6, 1, 199.00),                     
(4, 3, 8, 1, 2499.00),      
(5, 4, 1, 1, 499.00),                  
(6, 5, 3, 1, 1199.00),                     
(7, 5, 2, 1, 399.00),          
(8, 6, 9, 1, 699.00),  
(9, 7, 5, 2, 549.00), 
(10, 10, 8, 1, 2499.00);

5. INSERT INTO Payments (payment_id, order_id, payment_date, payment_amount, payment_method) VALUES
(1, 1, '2024-01-05', 1498.00, 'Credit Card'),
(2, 2, '2024-01-10', 299.00, 'UPI'),
(3, 3, '2024-01-15', 2499.00, 'Net Banking'),
(4, 4, '2024-01-18', 499.00, 'Cash on Delivery'),
(5, 5, '2024-01-20', 1598.00, 'Credit Card'),
(6, 6, '2024-01-22', 699.00, 'UPI'),
(7, 7, '2024-01-25', 1098.00, 'Debit Card'),
(8, 8, '2024-01-28', 199.00, 'UPI'),
(9, 9, '2024-02-01', 899.00, 'Net Banking'),
(10, 10, '2024-02-05', 2499.00, 'Credit Card');


Assignment Queries

1. Find the Total Number of Orders for Each Customer

SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    COUNT(o.order_id) AS total_orders
FROM 
    Customers c
LEFT JOIN 
    Orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name;

2. Find the Total Sales Amount for Each Product (Revenue per Product)

SELECT 
    p.product_id,
    p.product_name,
    SUM(od.quantity * od.unit_price) AS total_revenue
FROM 
    OrderDetails od
JOIN 
    Products p ON od.product_id = p.product_id
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    total_revenue DESC;





3. Find the Most Expensive Product Sold

SELECT 
  p.product_id,
    p.product_name,
    od.unit_price
FROM 
    OrderDetails od
JOIN 
    Products p ON od.product_id = p.product_id
ORDER BY 
    od.unit_price DESC
LIMIT 1;

4. Get the List of Customers Who Have Placed Orders in the Last 30 Days

SELECT 
    DISTINCT c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    c.email,
    o.order_date
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
WHERE 
    o.order_date >= CURRENT_DATE - INTERVAL 30 DAY;

5. Calculate the Total Amount Paid by Each Customer

SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    SUM(p.payment_amount) AS total_amount_paid
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
JOIN 
    Payments p ON o.order_id = p.order_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name
ORDER BY 
    total_amount_paid DESC;







6. Get the Number of Products Sold by Category

SELECT 
    p.category,
    SUM(od.quantity) AS total_products_sold
FROM 
    OrderDetails od
JOIN 
    Products p ON od.product_id = p.product_id
GROUP BY 
    p.category
ORDER BY 
    total_products_sold DESC;

7. List All Orders That Are Pending (i.e., Orders that haven't been shipped yet)

SELECT 
    o.order_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    o.order_date,
    o.total_amount,
    o.order_status
FROM 
    Orders o
JOIN 
    Customers c ON o.customer_id = c.customer_id
WHERE 
    o.order_status = 'Pending'
ORDER BY 
    o.order_date DESC;

8. Find the Average Order Value (Total Order Amount / Number of Orders)

SELECT 
    ROUND(SUM(total_amount) / COUNT(order_id), 2) AS average_order_value
FROM 
    Orders;

9. List the Top 5 Customers Who Have Spent the Most Money

SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    SUM(p.payment_amount) AS total_spent
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
JOIN 
    Payments p ON o.order_id = p.order_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name
ORDER BY 
    total_spent DESC
LIMIT 5;

10. Find the Products That Have Never Been Sold

SELECT 
    p.product_id,
    p.product_name,
    p.category,
    p.price
FROM 
    Products p
LEFT JOIN 
    OrderDetails od ON p.product_id = od.product_id
WHERE 
    od.product_id IS NULL;













